To Do List
============================
1. Run Cartpole with openai DQN --> DONE
    - Simple observation and action space
    - Not image based
    - Result: It works! Only took ~20 min
2. Run Pong with openai DQN --> Stage B
    - Still simple action space
    - Image based --> Requires CNN and atari wrappers
    - Result: It works! Took ~6 hours (only got ~19.8 reward though?)
3. Run Breakout with openai DQN --> Stage B
    - Known to converge slower
    - Result: Only got to 16.0 reward with 2M steps
    = Run for 10M steps with GTX 1080
4a. Run pygame pong with native DQN implementation
    - Are there are issues with pygame implementations?
    - It works! Not issue with pygame
4b. Run pygame pong with OpenAI DQN
    - Made pygame version of pong based on PLE
    - Are there issues with integrating pygame with OpenAI DQN?
    - It works! But it seems to train slower than the gym pong?
        - Full train loop:
            - ALE pong runs 0.0033sec/loop | PLE pong runs 0.0232sec/loop
        - env step:
            - ALE pong runs 0.0018sec/env_step | PLE pong runs 0.0216sec/env_step
        - get_raw_img function takes 0.004sec/env_step
        = changing the speed of paddles & ball doesn't help
        = not displaying the screen helps slightly: 0.0008sec reduction
        = Don't cap the FPS!
            - increasing FPS to 120 leads to proportional decrease in sec/loop
        = Not using MaxAndSkip speeds up the env step by 3x
        = Using WIDTHxHEIGHT from 400x400 to 200x200 speeds up the env step by 4x
            - but not much improvement with 200x200 to 100x100
5. Run cytomatrix with OpenAI DQN
    = It works!
    = The problem was due mainly to exploration; increase final eps to 0.1
    = Need to find an optimal epsilon schedule


Create the Final Training Script
================================
1. Run custom_cartpole.py
2. Compare custom_cartpole.py and custom_pong.py
3. Modify dqn.py based on #2


* Figure out why MaxAndSkip is slowing down env_step
* Figure out how set_global_seeds works
* Incorporate random seeding into cytomatrix and pygamepong
